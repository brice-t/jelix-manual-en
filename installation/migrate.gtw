~~LANG:FR@frman:installation/migration~~

When you migrate from an old version of jelix to a newer one, you always must do these tasks:

  * replace the @@F@lib/@@ directory by the one provided in the new version.
  * If you put your own libraries into the @@F@lib/@@ directory, don't forget to move them from the old @@F@lib/@@ directory to the new one.
  * remove all the files in the @@F@temp/yourapp/@@ directory
  * update your code as specified hereafter.

===== Updating from Jelix 1.2 or lower =====

Read the upgrade instructions of all previous manuals and then follow instructions below.

===== Upgrading from jelix 1.3 =====

Here are all steps to follow to migrate your application.

==== Backup ====

First, do a backup of your databases, and of your application files (modules, configuration etc.).

==== Temp directories ====

As usual, you must remove every files into the @@F@temp/yourapp/@@ directory.


==== Change your entry points ====


Your entrypoints should be changed:
  * the coordinator should be set into the jApp object.
  * the configuration file should be indicated to the jApp object too instead of the coordinator.
  * See a template in @@F@lib/jelix-scripts/templates/www/index.php.tpl@@.
 
Here is an example:

<code php>
require ('../application.init.php');
require (JELIX_LIB_CORE_PATH.'request/jClassicRequest.class.php');

checkAppOpened();

// load configuration
jApp::loadConfig('index/config.ini.php');

// new coordinator, and set it into the Jelix environment
jApp::setCoord(new jCoordinator());

// new request object, and call the coordinator to execute the action corresponding to the URL
jApp::coord()->process(new jClassicRequest());

</code>

  
==== Files removal ====

==== Other stuffs ====

==== Upgrading modules ====

  * update sources of vendor's modules that you have installed, with version compatible with Jelix 1.4.
  * For your own modules:
     * the global variable @@V@$gJConfig@@ is now deprecated. You should use @@M@jApp::config()@@ instead, to retrieve the configuration.
     * the global variable @@V@$gJCoord@@ is now deprecated. You should use @@M@jApp::coord()@@ instead, to retrieve the coordinator.
     * In @@F@module.xml@@ files, indicate that the module is compatible with Jelix 1.4 (change the attributes @@A@maxversion@@). Example:

<code xml>
        <jelix minversion="1.3" maxversion="1.4.*"/>
</code>


New API you can use:

  * TODO


Deprecated API you cannot use anymore:

  * TODO


==== Jelix update ====

After all these modifications, you should run your @@F@install/installer.php@@ script. The jelix module will change some things:
  * TODO


