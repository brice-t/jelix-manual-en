~~LANG:FR@frman:installation/migration~~

When you migrate from an old version of jelix to a newer one, you always must do these tasks:

  * replace the @@F@lib/@@ directory by the one provided in the new version.
  * If you put your own libraries into the @@F@lib/@@ directory, don't forget to move them from the old @@F@lib/@@ directory to the new one.
  * remove all the files in the @@F@temp/yourapp/@@ directory
  * update your code as specified hereafter.

===== Updating from Jelix 1.3 or lower =====

Read the upgrade instructions of all previous manuals and then follow instructions below.

===== Upgrading from jelix 1.4 =====

Here are all steps to follow to migrate your application.

==== Backup ====

First, do a backup of your databases, and of your application files (modules, configuration etc.).

==== Temp directories ====

As usual, you must remove every files into the @@F@temp/yourapp/@@ directory.
  
==== Files removal ====

==== Other stuffs ====



==== TCPDF Support ====

TCPDF, its fonts, the  response object @@C@jResponseTcpdf@@, and the class @@C@jTcpdf@@ have been
included into a new module, jtcpdf. If your application uses these objects, you have to download
this module (not available in the standard archive of Jelix) and you must install it.
You don't have to modify something else, except if you made some classes inheriting from
@@C@jResponseTcpdf@@ or @@C@jTcpdf@@. You probably have to change some path in @@require@@ or
@@include@@ instructions.

==== SOAP support ====

If you are using SOAP features (soap entry points, use of jWSDL..), you have to
make this change:

  * In the configuration you have to remove the activation of the jWSDL module,
  since it doesn't exists anymore, and you have to activate the jsoap module.
  
<code ini>
   [modules]
   jWSDL.access=2  ; <- remove this line
   jsoap.access=2 ; <- add this line
</code>

  * In your soap.php (or other entrypoints for soap), you have to change the content
   like this:

<code php>
require_once ('../application.init.php');

checkAppOpened();

jApp::loadConfig('soap/config.ini');
ini_set("soap.wsdl_cache_enabled", "0");

jClasses::inc('jsoap~jSoapCoordinator');
jClasses::inc('jsoap~jSoapRequest');

$jelix = new jSoapCoordinator();
jApp::setCoord($jelix);
$jelix->request = new jSoapRequest();
$jelix->request->initService();
$jelix->processSoap();
</code>

   * If you generate link for the jWSDL, change them by indicating the jsoap module
   * Modify the configuration of your SOAP clients that are using your soap
    services, by indicating the new URL of WSDLs.


==== Upgrading modules ====

  * update sources of vendor's modules that you have installed, with version compatible with Jelix 1.5.
  * For your own modules:
     * In @@F@module.xml@@ files, indicate that the module is compatible with Jelix 1.5 (change the attributes @@A@maxversion@@). Example:

<code xml>
        <jelix minversion="1.4" maxversion="1.5.*"/>
</code>

  * In your static HTML pages (via jResponseBasicHtml) and error page (error.en_US.php etc),
    the @@V@$basePath@@ variable should be renamed to @@V@$BASEPATH@@ (jelix 1.4.1)

New API you can use:

  * TODO


Deprecated API you cannot use anymore:

  * TODO


==== Jelix update ====

After all these modifications, you should run your @@F@install/installer.php@@ script. The jelix module will change some things:
  * nothing for the moment


